# https://leetcode.com/problems/valid-sudoku/

from typing import List


class Solution:
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        rowSets = [set() for _ in range(9)]
        colSets = [set() for _ in range(9)]
        smallGridSets = [set() for _ in range(9)]
        for i, row in enumerate(board):
            for j, el in enumerate(board[i]):
                if el == '.':
                    continue
                if el not in rowSets[i]:
                    rowSets[i].add(el)
                else:
                    return False  # row elems are not unique
                if el not in colSets[j]:
                    colSets[j].add(el)
                else:
                    return False  # col elems are not unique
                smallGridIndex = (i // 3) * 3 + j // 3
                if el not in smallGridSets[smallGridIndex]:
                    smallGridSets[smallGridIndex].add(el)
                else:
                    return False
        return True


s = Solution()

board = [["5", "3", ".", ".", "7", ".", ".", ".", "."],
         ["6", "7", ".", "1", "9", "5", ".", ".", "."],
         [".", "9", "8", ".", ".", ".", ".", "6", "."],
         ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
         ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
         ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
         [".", "6", ".", ".", ".", ".", "2", "8", "."],
         [".", ".", ".", "4", "1", "9", ".", ".", "5"],
         [".", ".", ".", ".", "8", ".", ".", "7", "9"]]
board2 = [["8", "3", ".", ".", "7", ".", ".", ".", "."],
          ["6", ".", ".", "1", "9", "5", ".", ".", "."],
          [".", "9", "8", ".", ".", ".", ".", "6", "."],
          ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
          ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
          ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
          [".", "6", ".", ".", ".", ".", "2", "8", "."],
          [".", ".", ".", "4", "1", "9", ".", ".", "5"],
          [".", ".", ".", ".", "8", ".", ".", "7", "9"]]

board3 = [[".", ".", ".", ".", "5", ".", ".", "1", "."],
          [".", "4", ".", "3", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "3", ".", ".", "1"],
          ["8", ".", ".", ".", ".", ".", ".", "2", "."],
          [".", ".", "2", ".", "7", ".", ".", ".", "."],
          [".", "1", "5", ".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "2", ".", ".", "."],
          [".", "2", ".", "9", ".", ".", ".", ".", "."],
          [".", ".", "4", ".", ".", ".", ".", ".", "."]]
board4 = [[".", "8", "7", "6", "5", "4", "3", "2", "1"],
          ["2", ".", ".", ".", ".", ".", ".", ".", "."],
          ["3", ".", ".", ".", ".", ".", ".", ".", "."],
          ["4", ".", ".", ".", ".", ".", ".", ".", "."],
          ["5", ".", ".", ".", ".", ".", ".", ".", "."],
          ["6", ".", ".", ".", ".", ".", ".", ".", "."],
          ["7", ".", ".", ".", ".", ".", ".", ".", "."],
          ["8", ".", ".", ".", ".", ".", ".", ".", "."],
          ["9", ".", ".", ".", ".", ".", ".", ".", "."]]
assert s.isValidSudoku(board) == True
assert s.isValidSudoku(board2) == False
assert s.isValidSudoku(board3) == False
assert s.isValidSudoku(board4) == True
